<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refentry id="class-gtkcombobox">
  <refnamediv>
    <refname>gtk.ComboBox</refname> <refpurpose>a widget used to choose from
    a list of items (new in PyGTK 2.4)</refpurpose>
  </refnamediv>

  <refsect1>
    <title>Synopsis</title>

    <classsynopsis language="python">
      <ooclass><classname>gtk.ComboBox</classname></ooclass>
      <ooclass><classname><link linkend="class-gtkbin">gtk.Bin</link></classname></ooclass>
      <ooclass><classname><link linkend="class-gtkcelllayout">gtk.CellLayout</link></classname></ooclass>
      <constructorsynopsis language="python">
	<methodname><link linkend="constructor-gtkcombobox">gtk.ComboBox</link></methodname>
	<methodparam><parameter role="keyword">model</parameter><initializer>None</initializer></methodparam>
      </constructorsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--get-has-entry">get_has_entry</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--get-entry-text-column">get_entry_text_column</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--set-entry-text-column">set_entry_text_column</link></methodname>
	<methodparam><parameter role="keyword">text_column</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--get-wrap-width">get_wrap_width</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--set-wrap-width">set_wrap_width</link></methodname>
	<methodparam><parameter role="keyword">width</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--get-row-span-column">get_row_span_column</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--set-row-span-column">set_row_span_column</link></methodname>
	<methodparam><parameter role="keyword">row_span</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--get-column-span-column">get_column_span_column</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--set-column-span-column">set_column_span_column</link></methodname>
	<methodparam><parameter role="keyword">column_span</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--get-button-sensitivity">get_button_sensitivity</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--set-button-sensitivity">set_button_sensitivity</link></methodname>
	<methodparam><parameter role="keyword">sensitivity</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--get-active">get_active</link></methodname>
	<methodparam></methodparam>  </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--set-active">set_active</link></methodname>
	<methodparam><parameter role="keyword">index</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--get-active-iter">get_active_iter</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--set-active-iter">set_active_iter</link></methodname>
	<methodparam><parameter role="keyword">iter</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--set-model">set_model</link></methodname>
	<methodparam><parameter role="keyword">model</parameter><initializer>None</initializer></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--get-model">get_model</link></methodname>
	<methodparam></methodparam>  </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--append-text">append_text</link></methodname>
	<methodparam><parameter role="keyword">text</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--insert-text">insert_text</link></methodname>
	<methodparam><parameter role="keyword">position</parameter></methodparam>
	<methodparam><parameter role="keyword">text</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--prepend-text">prepend_text</link></methodname>
	<methodparam><parameter role="keyword">text</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--remove-text">remove_text</link></methodname>
	<methodparam><parameter role="keyword">position</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--get-active-text">get_active_text</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--popup">popup</link></methodname>
	<methodparam></methodparam>  </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--popdown">popdown</link></methodname>
	<methodparam></methodparam>  </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--get-popup-accessible">get_popup_accessible</link></methodname>
	<methodparam></methodparam>  </methodsynopsis>

<!-- NOT IMPLEMENTED
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox- -get-row-separator-func">get_row_separator_func</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis>
END NOT IMPLEMENTED -->

      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--set-row-separator-func">set_row_separator_func</link></methodname>
	<methodparam><parameter role="keyword">func</parameter><initializer>None</initializer></methodparam>
	<methodparam><parameter role="keyword">data</parameter><initializer>None</initializer></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--get-add-tearoffs">get_add_tearoffs</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--set-add-tearoffs">set_add_tearoffs</link></methodname>
	<methodparam><parameter role="keyword">add_tearoffs</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--get-focus-on-click">get_focus_on_click</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkcombobox--set-focus-on-click">set_focus_on_click</link></methodname>
	<methodparam><parameter role="keyword">focus_on_click</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
        <methodname><link linkend="method-gtkcombobox--get-title">get_title</link></methodname>
        <methodparam></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
        <methodname><link linkend="method-gtkcombobox--set-title">set_title</link></methodname>
        <methodparam><parameter role="keyword">title</parameter></methodparam>
      </methodsynopsis>
    </classsynopsis>

    <programlisting>
<emphasis role="bold">Functions</emphasis>

<methodsynopsis language="python">
	<methodname><link linkend="function-gtk--combo-box-new-text">gtk.combo_box_new_text</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis></programlisting>

  </refsect1>

  <refsect1>
    <title>Ancestry</title>

<synopsis>+-- <link linkend="class-gobject">gobject.GObject</link>
  +-- <link linkend="class-gtkobject">gtk.Object</link>
    +-- <link linkend="class-gtkwidget">gtk.Widget</link>
      +-- <link linkend="class-gtkcontainer">gtk.Container</link>
        +-- <link linkend="class-gtkbin">gtk.Bin</link>
          +-- <link linkend="class-gtkcombobox">gtk.ComboBox</link>
</synopsis>
  </refsect1>

    <refsect1>
		<title>Implemented Interfaces</title>
		<para>
			<link linkend="class-gtkcombobox"><classname>gtk.ComboBox</classname></link>
			implements 
			<link linkend="class-gtkbuildable"><classname>gtk.Buildable</classname></link>
            <link linkend="class-atkimplementor"><classname>atk.ImplementorIFace</classname></link>
            <link linkend="class-gtkcelleditable"><classname>gtk.CellEditable</classname></link>
            <link linkend="class-gtkcelllayout"><classname>gtk.CellLayout</classname></link>
		</para>
	</refsect1>

  <refsect1 id="properties-gtkcombobox">
    <title>gtk.ComboBox Properties</title>

    <para><link linkend="properties-gtkobject">gtk.Object Properties</link></para>
    <para><link linkend="properties-gtkwidget">gtk.Widget Properties</link></para>
    <para><link linkend="properties-gtkcontainer">gtk.Container Properties</link></para>

    <blockquote role="properties">
      <informaltable pgwide="1" frame="none">
	<tgroup cols="3">
	  <colspec column="1" colwidth="1in"/>
	  <colspec column="2" colwidth="1in"/>
	  <colspec column="3" colwidth="4in"/>
	  <tbody>

	    <row valign="top">
	      <entry>"active"</entry>
	      <entry>Read-Write</entry>
	      <entry>The index of the item that is currently active.. If the
	      model is a non-flat treemodel, and the active item is not an
	      immediate child of the root of the tree, this property has the
	      value of the first index of the path of the item. This
	      property is available in GTK+ 2.4 and above.</entry>
	    </row>

	    <row valign="top">
	      <entry>"add-tearoffs"</entry>
	      <entry>Read-Write</entry>
	      <entry>If <literal>True</literal> generated menus have tearoff
	      menu items. Note that this only affects menu style combo
	      boxes.  Default value: <literal>False</literal>. Available in
	      GTK+ 2.6 and above.</entry>
	    </row>

	    <row valign="top">
	      <entry>"button-sensitivity"</entry>
	      <entry>Read-Write</entry>
	      <entry>Whether the dropdown button is sensitive when the model is empty.
	      Default value: gtk.SENSITIVITY_AUTO. Available in
	      GTK+ 2.14 and above.</entry>
	    </row>

	    <row valign="top">
	      <entry>"column-span-column"</entry>
	      <entry>Read-Write</entry>
	      <entry>The TreeModel column containing the column span values.
	      This property is available in GTK+ 2.4 and above</entry>
	    </row>

      <row valign="top">
        <entry>"entry-text-column"</entry>
        <entry>Read-Write</entry>
        <entry>The column in the combo box's model to associate with strings from
        the entry if the combo was created with "has-entry" = <literal>True</literal>.
        This property is available in GTK+ 2.24 and above</entry>
      </row>

      <row valign="top">
        <entry>"focus-on-click"</entry>
        <entry>Read-Write</entry>
        <entry>If <literal>True</literal> the combo box grabs focus
        when it is clicked with the mouse. Default value:
        <literal>True</literal></entry>
      </row>

      <row valign="top">
        <entry>"has-entry"</entry>
        <entry>Read-Write-Construct Only</entry>
        <entry>Whether the combo box has an entry. Default value: <literal>False</literal>.
        This property is available in GTK+ 2.24 and above</entry>
      </row>

	    <row valign="top">
	      <entry>"has-frame"</entry>
	      <entry>Read-Write</entry>
	      <entry>If <literal>True</literal> the combo box grabs focus
	      when it is clicked with the mouse. Default value:
	      <literal>True</literal>.  Available in GTK+ 2.6 and
	      above.</entry>
	    </row>

	    <row valign="top">
	      <entry>"model"</entry>
	      <entry>Read-Write</entry>
	      <entry>The TreeModel for the combo box. This property is
	      available in GTK+ 2.4 and above.</entry>
	    </row>

	    <row valign="top">
	      <entry>"popup-shown"</entry>
	      <entry>Read-Write</entry>
	      <entry>If <literal>True</literal> the dropdown menu of the
	      combobox is popped up. Note that this property is mainly
	      useful, because it allows you to connect to the
	      "notify::popup-shown" signal. Available in GTK+ 2.10 and
	      above.</entry>
	    </row>

	    <row valign="top">
	      <entry>"row-span-column"</entry>
	      <entry>Read-Write</entry>
	      <entry>The TreeModel column containing the row span
	      values. This property is available in GTK+ 2.4 and
	      above.</entry>
	    </row>

	    <row valign="top">
	      <entry>"tearoff-title"</entry>
	      <entry>Read-Write</entry>
	      <entry>A title that may be displayed by the window manager
	      when the popup is torn-off.  Default value: "". Available in
	      GTK+ 2.10 and above</entry>
	    </row>

	    <row valign="top">
	      <entry>"wrap-width"</entry>
	      <entry>Read-Write</entry>
	      <entry>The number of columns to use to lay out the popup
	      items. This property is available in GTK+ 2.4 and
	      above.</entry>
	    </row>

	  </tbody>
	</tgroup>
      </informaltable>
    </blockquote>

  </refsect1>

  <refsect1 id="style-properties-gtkcombobox">
    <title>gtk.ComboBox Style Properties</title>

    <para><link linkend="style-properties-gtkwidget">gtk.Widget Style Properties</link></para>

    <blockquote role="properties">
      <informaltable pgwide="1" frame="none">
	<tgroup cols="3">
	  <colspec column="1" colwidth="1in"/>
	  <colspec column="2" colwidth="1in"/>
	  <colspec column="3" colwidth="4in"/>
	  <tbody>

	    <row valign="top">
	      <entry>"appears-as-list"</entry>
	      <entry>Read-Write</entry>
	      <entry>If <literal>True</literal>, the combo box dropdowns
	      should look like lists rather than menus.</entry>
	    </row>

        <row valign="top">
	      <entry>"arrow-size"</entry>
	      <entry>Read-Write</entry>
	      <entry>Sets the minimum size of the arrow in the combo box. Note that
          the arrow size is coupled to the font size, so in case a larger font
          is used, the arrow will be larger than set by arrow size.
          Allowed values: >= 0. Default value: 15. Available in
	      GTK+ 2.12 and above.</entry>
	    </row>

        <row valign="top">
	      <entry>"shadow-type"</entry>
	      <entry>Read-Write</entry>
	      <entry>Which kind of shadow to draw around the combo box.
          Default value: gtk.SHADOW_NONE.
          This property is available in GTK+ 2.12 and above.</entry>
	    </row>

	  </tbody>
	</tgroup>
      </informaltable>
    </blockquote>

  </refsect1>

  <refsect1 id="signal-prototypes-gtkcombobox">
    <title>gtk.ComboBox Signal Prototypes</title>

    <para><link linkend="signal-prototypes-gobject">gobject.GObject Signal Prototypes</link></para>
    <para><link linkend="signal-prototypes-gtkobject">gtk.Object Signal Prototypes</link></para>
    <para><link linkend="signal-prototypes-gtkwidget">gtk.Widget Signal Prototypes</link></para>
    <para><link linkend="signal-prototypes-gtkcontainer">gtk.Container Signal Prototypes</link></para>
    <para><link linkend="signal-prototypes-gtkcelleditable">gtk.CellEditable Signal Prototypes</link></para>

    <variablelist>
      <varlistentry>
        <term>"<link linkend="signal-gtkcombobox--changed">changed</link>"</term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>combobox</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>"<link linkend="signal-gtkcombobox--move-active">move-active</link>"</term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>combobox</parameter></methodparam>
	    <methodparam><parameter>scroll_type</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>"<link linkend="signal-gtkcombobox--popdown">popdown</link>"</term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>combobox</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>"<link linkend="signal-gtkcombobox--popup">popup</link>"</term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>combobox</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1>

  <refsect1>
    <title>Description</title>

    <note>
      <para>This widget is available in GTK+ 2.4 and PyGTK 2.4 and above.</para>
    </note>

    <para>The <link
    linkend="class-gtkcombobox"><classname>gtk.ComboBox</classname></link>
    is a replacement for the <link
    linkend="class-gtkoptionmenu"><classname>gtk.OptionMenu</classname></link>. The
    <link
    linkend="class-gtkcombobox"><classname>gtk.ComboBox</classname></link>
    implements the <link
    linkend="class-gtkcelllayout"><classname>gtk.CellLayout</classname></link>
    interface that provides a number of useful methods for managing the
    contents. A <link
    linkend="class-gtkcombobox"><classname>gtk.ComboBox</classname></link>
    is created with the <link
    linkend="constructor-gtkcombobox">gtk.ComboBox()</link> constructor that
    is associated with the optional <link
    linkend="class-gtktreemodel"><classname>gtk.TreeModel</classname></link>. If
    no <link
    linkend="class-gtktreemodel"><classname>gtk.TreeModel</classname></link>
    is specified it can be added later with the <link
    linkend="method-gtkcombobox--set-model"><methodname>set_model</methodname>()</link>
    method.</para>

    <para>Alternatively, the <link
    linkend="function-gtk--combo-box-new-text"><function>gtk.combo_box_new_text</function>()</link>
    function creates a simple <link
    linkend="class-gtkcombobox"><classname>gtk.ComboBox</classname></link>
    and associated <link
    linkend="class-gtkliststore"><classname>gtk.ListStore</classname></link>
    model. A <link
    linkend="class-gtkcellrenderertext"><classname>gtk.CellRendererText</classname></link>
    is also created and packed in the new combo box. In this simple combo
    box each list item is a text string that can be selected.  The
    convenience methods <link
    linkend="method-gtkcombobox--append-text"><methodname>append_text</methodname>()</link>,
    <link
    linkend="method-gtkcombobox--prepend-text"><methodname>prepend_text</methodname>()</link>,
    <link
    linkend="method-gtkcombobox--insert-text"><methodname>insert_text</methodname>()</link>
    and <link
    linkend="method-gtkcombobox--remove-text"><methodname>remove_text</methodname>()</link>
    can be used to manage the contents of the <link
    linkend="class-gtkcombobox"><classname>gtk.ComboBox</classname></link>. Using
    the <link
    linkend="function-gtk--combo-box-new-text"><function>gtk.combo_box_new_text</function>()</link>
    function is equivalent to:</para>

    <programlisting>
  liststore = gtk.ListStore(gobject.TYPE_STRING)
  combobox = gtk.ComboBox(liststore)
  cell = gtk.CellRendererText()
  combobox.pack_start(cell, True)
  combobox.add_attribute(cell, 'text', 0)
</programlisting>

  </refsect1>

  <refsect1 id="constructor-gtkcombobox">
    <title>Constructor</title>

    <programlisting><constructorsynopsis language="python">
    <methodname>gtk.ComboBox</methodname>
    <methodparam><parameter role="keyword">model</parameter><initializer>None</initializer></methodparam>
      </constructorsynopsis></programlisting>
    <variablelist>
      <varlistentry>
	<term><parameter role="keyword">model</parameter>&nbsp;:</term>
	<listitem><simpara>A valid <link linkend="class-gtktreemodel"><classname>gtk.TreeModel</classname></link>.</simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term><emphasis>Returns</emphasis>&nbsp;:</term>
	<listitem><simpara>A new <link linkend="class-gtkcombobox"><classname>gtk.ComboBox</classname></link>.</simpara></listitem>
      </varlistentry>
    </variablelist>

    <note>
      <para>This constructor is available in PyGTK 2.4 and above.</para>
    </note>

    <para>Creates a new <link
    linkend="class-gtkcombobox"><classname>gtk.ComboBox</classname></link>
    associated with the optional <link
    linkend="class-gtktreemodel"><classname>gtk.TreeModel</classname></link>
    specified by <parameter>model</parameter>. If
    <parameter>model</parameter> is not specified the combo box will not
    have an associated tree model.</para>

  </refsect1>

  <refsect1>
    <title>Methods</title>

    <refsect2 id="method-gtkcombobox--get-has-entry">
      <title>gtk.ComboBox.get_has_entry</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_has_entry</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>Whether there is an entry in the combo box.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.24 and above.</para>
      </note>

      <para>The <methodname>get_has_entry</methodname>() method returns
      whether the combo box has an entry.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--get-entry-text-column">
      <title>gtk.ComboBox.get_entry_text_column</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_entry_text_column</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>A column in the data source model of the combo box.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.24 and above.</para>
      </note>

      <para>The <methodname>get_entry_text_column</methodname>() method returns
      the columns which the combo box is using to get the strings
      from to display in the internal entry.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--set-entry-text-column">
      <title>gtk.ComboBox.set_entry_text_column</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>set_entry_text_column</methodname>
	  <methodparam><parameter role="keyword">text_column</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">text_column</parameter>&nbsp;:</term>
	  <listitem><simpara>A column in the data source model to get the strings from for the internal entry.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.24 and above.</para>
      </note>

      <para>The <methodname>set_entry_text_column</methodname>() method sets the model column
      which the combo box should use to get strings from to be text_column. The column text_column
      in the model of combo box must be of type G_TYPE_STRING.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--get-wrap-width">
      <title>gtk.ComboBox.get_wrap_width</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_wrap_width</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>The wrap width.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.6 and above.</para>
      </note>

      <para>The <methodname>get_wrap_width</methodname>() method returns the
value of the "wrap-width" property of the combo box as set by the <link
linkend="method-gtkcombobox--set-wrap-width"><methodname>set_wrap_width</methodname>()</link>
method. The wrap width is basically the preferred number of columns to use
to lay out the popup i.e. lays out the popup items in a table with
<parameter>width</parameter> columns.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--set-wrap-width">
      <title>gtk.ComboBox.set_wrap_width</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>set_wrap_width</methodname>
	  <methodparam><parameter role="keyword">width</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">width</parameter>&nbsp;:</term>
	  <listitem><simpara>The preferred number of columns of
width.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>set_wrap_width</methodname>() method sets the
wrap width (and the "wrap-width" property) of the combo box to the value
specified by <parameter>width</parameter>. The wrap width is basically the
preferred number of columns to use to lay out the popup i.e. lays out the
popup items in a table with <parameter>width</parameter> columns.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--get-row-span-column">
      <title>gtk.ComboBox.get_row_span_column</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_row_span_column</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>The row span column.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.6 and above.</para>
      </note>

      <para>The <methodname>get_row_span_column</methodname>() method
returns the value of the "row-span-column" property. The "row-span-column"
property indicates the column in the associated <link
linkend="class-gtktreemodel"><classname>gtk.TreeModel</classname></link> row
that contains an integer that indicates how many rows the item should
span.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--set-row-span-column">
      <title>gtk.ComboBox.set_row_span_column</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>set_row_span_column</methodname>
	  <methodparam><parameter role="keyword">row_span</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">row_span</parameter>&nbsp;:</term>
	  <listitem><simpara>A column in the model passed during construction.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>set_row_span_column</methodname>() method sets
the "row-span-column" property to the value specified by
<parameter>row_span</parameter>. The "row-span-column" property indicates
the column in the associated <link
linkend="class-gtktreemodel"><classname>gtk.TreeModel</classname></link> row
that contains an integer that indicates how many rows the item should
span.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--get-column-span-column">
      <title>gtk.ComboBox.get_column_span_column</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_column_span_column</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>The column span column.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.6 and above.</para>
      </note>

      <para>The <methodname>get_column_span_column</methodname>() method
returns the value of the "column-span-column" property. The
"column-span-column" property indicates the column in the associated <link
linkend="class-gtktreemodel"><classname>gtk.TreeModel</classname></link> row
that contains an integer that indicates how many columns the item should
span.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--set-column-span-column">
      <title>gtk.ComboBox.set_column_span_column</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>set_column_span_column</methodname>
	  <methodparam><parameter role="keyword">column_span</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">column_span</parameter>&nbsp;:</term>
	  <listitem><simpara>A column in the model passed during construction.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>set_column_span_column</methodname>() method
sets the "column-span-column" property to the value specified by
<parameter>column_span</parameter>. The "column-span-column" property
indicates the column in the associated <link
linkend="class-gtktreemodel"><classname>gtk.TreeModel</classname></link> row
that contains an integer that indicates how many columns the item should
span.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--get-button-sensitivity">
      <title>gtk.ComboBox.get_button_sensitivity</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_button_sensitivity</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>gtk.SENSITIVITY_ON if the dropdown button is sensitive when
	  the model is empty, gtk.SENSITIVITY_OFF  if the button is always insensitive
	  or gtk.SENSITIVITY_AUTO if it is only sensitive as long as the model
	  has one item to be selected.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.14 and above.</para>
      </note>

      <para>
	The <methodname>get_button_sensitivity</methodname>() method returns whether
	the combo box sets the dropdown button sensitive or not when there are no items in the model.
      </para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--set-button-sensitivity">
      <title>gtk.ComboBox.set_button_sensitivity</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>set_button_sensitivity</methodname>
	  <methodparam><parameter role="keyword">sensitivity</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">sensitivity</parameter>&nbsp;:</term>
	  <listitem><simpara>specify the sensitivity of the dropdown button.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.14 and above.</para>
      </note>

      <para>
	The <methodname>set_button_sensitivity</methodname>() method sets whether the
	dropdown button of the combo box should be always sensitive (gtk.SENSITIVITY_ON),
	never sensitive (gtk.SENSITIVITY_OFF) or only if there is at least one item to
	display (gtk.SENSITIVITY_AUTO).
      </para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--get-active">
      <title>gtk.ComboBox.get_active</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_active</methodname>
	  <methodparam></methodparam>  </methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>An integer which is the model index of the
	  currently active item, or -1 if there's no active
	  item.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>get_active</methodname>() method returns the
      value of the "active" property which is the index in the model of the
      currently active item, or -1 if there's no active item. If the model
      is a non-flat treemodel, and the active item is not an immediate child
      of the root of the tree, this method returns the first path index of
      the active item. For example if the path of the active item is (1, 0,
      2) this method will return 1.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--set-active">
      <title>gtk.ComboBox.set_active</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>set_active</methodname>
	  <methodparam><parameter role="keyword">index</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">index</parameter>&nbsp;:</term>
	  <listitem><simpara>An index in the model passed during
	  construction, or -1 to have no active item.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>set_active</methodname>() method sets the active
item of the combo_box to the item with the model index specified by
<parameter>index</parameter>. If <parameter>index</parameter> is -1 the
combo box will have no active item. The "active" property is also set to the
value of <parameter>index</parameter>.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--get-active-iter">
      <title>gtk.ComboBox.get_active_iter</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_active_iter</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>A <link
	  linkend="class-gtktreeiter"><classname>gtk.TreeIter</classname></link>
	  that points at the active item or <literal>None</literal> if there
	  is no active item.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>get_active_iter</methodname>() method returns a
      <link
      linkend="class-gtktreeiter"><classname>gtk.TreeIter</classname></link>
      that points to the current active item or <literal>None</literal> if
      there is no active item.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--set-active-iter">
      <title>gtk.ComboBox.set_active_iter</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>set_active_iter</methodname>
	  <methodparam><parameter role="keyword">iter</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">iter</parameter>&nbsp;:</term>
	  <listitem><simpara>A valid <link
	  linkend="class-gtktreeiter"><classname>gtk.TreeIter</classname></link>
	  pointing at an item in the associated <link
	  linkend="class-gtktreemodel"><classname>gtk.TreeModel</classname></link>.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>set_active_iter</methodname>() method sets the
current active item to be the one referenced by <parameter>iter</parameter>
in the associated <link
linkend="class-gtktreemodel"><classname>gtk.TreeModel</classname></link>.
<parameter>iter</parameter> must correspond to a path of depth one. The
"active" property is also set by this method.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--set-model">
      <title>gtk.ComboBox.set_model</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>set_model</methodname>
	  <methodparam><parameter role="keyword">model</parameter><initializer>None</initializer></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">model</parameter>&nbsp;:</term>
	  <listitem><simpara>A <link linkend="class-gtktreemodel"><classname>gtk.TreeModel</classname></link>.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>set_model</methodname>() method sets the model
used by the combo box to the value specified by
<parameter>model</parameter>. The "model" property will also be set to the
value of <parameter>model</parameter>. A previously set model will be
unset. If <parameter>model</parameter> is <literal>None</literal> or not
specified, the old model will be unset.</para>

      <note>
        <para>In PyGTK 2.4.0 the model could not be <literal>None</literal>
and did not default to <literal>None</literal>.</para>
      </note>

    </refsect2>

    <refsect2 id="method-gtkcombobox--get-model">
      <title>gtk.ComboBox.get_model</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_model</methodname>
	  <methodparam></methodparam>  </methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>A <link
	  linkend="class-gtktreemodel"><classname>gtk.TreeModel</classname></link>
	  or <literal>None</literal>.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>get_model</methodname>() method returns the
value of the "model" property which contains the <link
linkend="class-gtktreemodel"><classname>gtk.TreeModel</classname></link>
that is acting as data source for the combo_box or <literal>None</literal>
if no <link
linkend="class-gtktreemodel"><classname>gtk.TreeModel</classname></link> is
associated with the combo box.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--append-text">
      <title>gtk.ComboBox.append_text</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>append_text</methodname>
	  <methodparam><parameter role="keyword">text</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">text</parameter>&nbsp;:</term>
	  <listitem><simpara>A string.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
        <para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <warning>
        <para>This method is deprecated since PyGTK 2.24 and should not be used in newly-written code.
        Use <link linkend="class-gtkcomboboxtext"><classname>gtk.ComboBoxText</classname></link>
        instead.</para>
      </warning>

      <para>The <methodname>append_text</methodname>() method appends the
string specified by <parameter>text</parameter> to the list of strings
stored in the combo box <link
linkend="class-gtkliststore"><classname>gtk.ListStore</classname></link>. Note
that you can only use this method with combo boxes constructed with the
<link
linkend="function-gtk--combo-box-new-text"><function>gtk.combo_box_new_text</function>()</link>
function.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--insert-text">
      <title>gtk.ComboBox.insert_text</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>insert_text</methodname>
	  <methodparam><parameter role="keyword">position</parameter></methodparam>
	  <methodparam><parameter role="keyword">text</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">position</parameter>&nbsp;:</term>
	  <listitem><simpara>A model index where the
	  <parameter>text</parameter> should be
	  inserted.</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter role="keyword">text</parameter>&nbsp;:</term>
	  <listitem><simpara>A string.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
        <para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <warning>
        <para>This method is deprecated since PyGTK 2.24 and should not be used in newly-written code.
        Use <link linkend="class-gtkcomboboxtext"><classname>gtk.ComboBoxText</classname></link>
        instead.</para>
      </warning>

      <para>The <methodname>insert_text</methodname>() method inserts the
string specified by <parameter>text</parameter> in the combo box <link
linkend="class-gtkliststore"><classname>gtk.ListStore</classname></link> at
the index specified by <parameter>position</parameter>. Note that you can
only use this method with combo boxes constructed with the <link
linkend="function-gtk--combo-box-new-text"><function>gtk.combo_box_new_text</function>()</link>
function.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--prepend-text">
      <title>gtk.ComboBox.prepend_text</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>prepend_text</methodname>
	  <methodparam><parameter role="keyword">text</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">text</parameter>&nbsp;:</term>
	  <listitem><simpara>A string.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
        <para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <warning>
        <para>This method is deprecated since PyGTK 2.24 and should not be used in newly-written code.
        Use <link linkend="class-gtkcomboboxtext"><classname>gtk.ComboBoxText</classname></link>
        instead.</para>
      </warning>

      <para>The <methodname>prepend_text</methodname>() method prepends the
string specified by <parameter>text</parameter> to the list of strings
stored in the <link
linkend="class-gtkliststore"><classname>gtk.ListStore</classname></link>
associated with the combo_box. Note that you can only use this method with
combo boxes constructed with the <link
linkend="function-gtk--combo-box-new-text"><function>gtk.combo_box_new_text</function>()</link>
function.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--remove-text">
      <title>gtk.ComboBox.remove_text</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>remove_text</methodname>
	  <methodparam><parameter role="keyword">position</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">position</parameter>&nbsp;:</term>
	  <listitem><simpara>Index of the item to remove.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
        <para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <warning>
        <para>This method is deprecated since PyGTK 2.24 and should not be used in newly-written code.
        Use <link linkend="class-gtkcomboboxtext"><classname>gtk.ComboBoxText</classname></link>
        instead.</para>
      </warning>

      <para>The <methodname>remove_text</methodname>() method removes the
string at the index specified by <parameter>position</parameter> in the
associated <link
linkend="class-gtkliststore"><classname>gtk.ListStore</classname></link>. Note
that you can only use this function with combo boxes constructed with the
<link
linkend="function-gtk--combo-box-new-text"><function>gtk.combo_box_new_text</function>()</link>
function.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--get-active-text">
      <title>gtk.ComboBox.get_active_text</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_active_text</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>The currently active text.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
        <para>This method is available in PyGTK 2.6 and above.</para>
      </note>

      <warning>
        <para>This method is deprecated since PyGTK 2.24 and should not be used in newly-written code.
        Use <link linkend="class-gtkcomboboxtext"><classname>gtk.ComboBoxText</classname></link>
        instead.</para>
      </warning>

      <para>The <methodname>get_active_text</methodname>() method returns
the currently active string or <literal>None</literal> if no entry is
selected. Note that you can only use this function with combo boxes
constructed with the <link
linkend="function-gtk--combo-box-new-text"><function>gtk.combo_box_new_text</function>()</link>
function.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--popup">
      <title>gtk.ComboBox.popup</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>popup</methodname>
	  <methodparam></methodparam>  </methodsynopsis></programlisting>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>popup</methodname>() method pops up the menu or
      dropdown list of the combo box. This method is mostly intended for use
      by accessibility technologies; applications should have little use for
      it.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--popdown">
      <title>gtk.ComboBox.popdown</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>popdown</methodname>
	  <methodparam></methodparam>  </methodsynopsis></programlisting>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>popdown</methodname>() method hides the menu or
dropdown list of the combo box. This method is mostly intended for use by
accessibility technologies; applications should have little use for
it.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--get-popup-accessible">
      <title>gtk.ComboBox.get_popup_accessible</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_popup_accessible</methodname>
	  <methodparam></methodparam>
        </methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>the accessible object corresponding to the
popup.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.6 and above.</para>
      </note>

      <para>The <methodname>get_popup_accessible</methodname>() method gets
the accessible object corresponding to the popup. This method is mostly
intended for use by accessibility technologies; applications should have
little use for it.</para>

    </refsect2>

<!-- NOT IMPLEMENTED
    <refsect2 id="method-gtkcombobox- -get-row-separator-func">
      <title>gtk.ComboBox.get_row_separator_func</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_row_separator_func</methodname>
	  <methodparam></methodparam>
        </methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara> the current row separator
function.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.6 and above.</para>
      </note>

      <para>The <methodname>get_row_separator_func</methodname>() method
returns the current row separator function as set by the <link
linkend="method-gtkcombobo- -set-row-separator-func"><methodname>set_row_separator_func</methodname>()</link>
method.</para>

    </refsect2>
END NOT IMPLEMENTED -->

    <refsect2 id="method-gtkcombobox--set-row-separator-func">
      <title>gtk.ComboBox.set_row_separator_func</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>set_row_separator_func</methodname>
	  <methodparam><parameter role="keyword">func</parameter><initializer>None</initializer></methodparam>
	  <methodparam><parameter role="keyword">data</parameter><initializer>None</initializer></methodparam>
        </methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">func</parameter>&nbsp;:</term>
	  <listitem><simpara>a function or
<literal>None</literal></simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter role="keyword">data</parameter>&nbsp;:</term>
      <listitem><simpara>user data to pass to
<parameter>func</parameter></simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.6 and above.</para>
      </note>

      <para>The <methodname>set_row_separator_func</methodname>() method
sets the row separator function to <parameter>func</parameter>, which is
used to determine if a row should be drawn as a separator. If func is
<literal>None</literal>, no separators are drawn. This is the default
value.</para>

      <para>The signature of <parameter>func</parameter> is:</para>

      <programlisting>
  def func(model, iter, user_data):
</programlisting>

      <para>where <parameter>model</parameter> is the <link
linkend="class-gtktreemodel"><classname>gtk.TreeModel</classname></link>
used by the combo box, <parameter>iter</parameter> is a <link
linkend="class-gtktreeiter"><classname>gtk.TreeIter</classname></link>
pointing at a row in <parameter>model</parameter> and
<parameter>user_data</parameter> is
<parameter>data</parameter>. <parameter>func</parameter> returns
<literal>True</literal> if the row is a separator. A common way to implement
<parameter>func</parameter> is to have a boolean column in
<parameter>model</parameter>, that indicates if the row is a
separator.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--get-add-tearoffs">
      <title>gtk.ComboBox.get_add_tearoffs</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_add_tearoffs</methodname>
	  <methodparam></methodparam>
        </methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara><literal>True</literal> if menus should have a
tearoff menuitem.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.6 and above.</para>
      </note>

      <para>The <methodname>get_add_tearoffs</methodname>() method returns the
value of the "add-tearoffs" property.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--set-add-tearoffs">
      <title>gtk.ComboBox.set_add_tearoffs</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>set_add_tearoffs</methodname>
	  <methodparam><parameter role="keyword">add_tearoffs</parameter></methodparam>
        </methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">add_tearoffs</parameter>&nbsp;:</term>
	  <listitem><simpara>if <literal>True</literal> add tearoff menu items</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.6 and above.</para>
      </note>

      <para>The <methodname>set_add_tearoffs</methodname>() method sets the
"add-tearoffs" property to the value of
<parameter>add_tearoffs</parameter>. If <parameter>add_tearoffs</parameter>
is <literal>True</literal>, the popup menu should have a tearoff menu
item.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--get-focus-on-click">
      <title>gtk.ComboBox.get_focus_on_click</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_focus_on_click</methodname>
	  <methodparam></methodparam>
        </methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara><literal>True</literal> if the combo box grabs
focus when it is clicked with the mouse.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.6 and above.</para>
      </note>

      <para>The <methodname>get_focus_on_click</methodname>() method returns
the value of the "focus-on-click" property.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--set-focus-on-click">
      <title>gtk.ComboBox.set_focus_on_click</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>set_focus_on_click</methodname>
	  <methodparam><parameter role="keyword">focus_on_click</parameter></methodparam>
        </methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">focus_on_click</parameter>&nbsp;:</term>
	  <listitem><simpara>if <literal>True</literal> the combo box grabs
focus when clicked with the mouse.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.6 and above.</para>
      </note>

      <para>The <methodname>set_focus_on_click</methodname>() method sets the
value of the "focus-on-click" property to the value of
<parameter>focus_on_click</parameter>. If
<parameter>focus_on_click</parameter> is <literal>True</literal> the combo
box grabs focus when clicked with the mouse.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--get-title">
      <title>gtk.ComboBox.get_title</title>

      <programlisting><methodsynopsis language="python">
        <methodname>get_title</methodname>
        <methodparam></methodparam>
      </methodsynopsis></programlisting>

      <variablelist>
        <varlistentry>
          <term><emphasis>Returns</emphasis>&nbsp;:</term>
          <listitem><simpara>the menu's title in tearoff
          mode..</simpara></listitem>
        </varlistentry>
      </variablelist>

      <note>
        <para>This method is available in PyGTK 2.10 and above.</para>
      </note>

      <para>The <methodname>get_title</methodname>() method returns the
      value of the "tearoff-title" property that contains the current title
      of the menu in tearoff mode. See the <link
      linkend="method-gtkcombobox--set-add-tearoffs"><methodname>set_add_tearoffs()</methodname></link>
      method for more information.</para>

    </refsect2>

    <refsect2 id="method-gtkcombobox--set-title">
      <title>gtk.ComboBox.set_title</title>

      <programlisting><methodsynopsis language="python">
        <methodname>set_title</methodname>
        <methodparam><parameter role="keyword">title</parameter></methodparam>
      </methodsynopsis></programlisting>

      <variablelist>
        <varlistentry>
          <term><parameter role="keyword">title</parameter>&nbsp;:</term>
          <listitem><simpara>a title for the menu in tearoff
          mode.</simpara></listitem>
        </varlistentry>
      </variablelist>

      <note>
        <para>This method is available in PyGTK 2.10 and above.</para>
      </note>

      <para>The <methodname>set_title</methodname>() method sets the
      "tearoff-title" property to the value of
      <parameter>title</parameter>. The "tearoff-title" property contains
      the menu's title in tearoff mode.</para>

    </refsect2>

  </refsect1>

  <refsect1>
    <title>Functions</title>

    <refsect2 id="function-gtk--combo-box-new-text">
      <title>gtk.combo_box_new_text</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.combo_box_new_text</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	<term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>A new <link
	  linkend="class-gtkcombobox"><classname>gtk.ComboBox</classname></link>
	  for text items.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This function is available in PyGTK 2.4 and above.</para>
      </note>

      <warning>
        <para>This function is deprecated since PyGTK 2.24 and should not be used in newly-written code.
        Use <link linkend="class-gtkcomboboxtext"><classname>gtk.ComboBoxText</classname></link>
        instead.</para>
      </warning>

      <para>The <function>gtk.combo_box_new_text</function>() function is a
convenience function that constructs a new text combo box, which is a <link
linkend="class-gtkcombobox"><classname>gtk.ComboBox</classname></link> just
displaying strings. If you use this function to create a text combo box, you
should only manipulate its data source with the following convenience
methods: <link
linkend="method-gtkcombobox--append-text"><methodname>append_text</methodname>()</link>,
<link
linkend="method-gtkcombobox--insert-text"><methodname>insert_text</methodname>()</link>,
<link
linkend="method-gtkcombobox--prepend-text"><methodname>prepend_text</methodname>()</link>
and <link
linkend="method-gtkcombobox--remove-text"><methodname>remove_text</methodname>()</link>.</para>

    </refsect2>

  </refsect1>

  <refsect1>
    <title>Signals</title>

    <refsect2 id="signal-gtkcombobox--changed">
      <title>The "changed" gtk.ComboBox Signal</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>callback</methodname>
	  <methodparam><parameter>combobox</parameter></methodparam>
	  <methodparam><parameter>user_param1</parameter></methodparam>
	  <methodparam><parameter>...</parameter></methodparam>
	</methodsynopsis></programlisting>

      <variablelist>
	<varlistentry>
	  <term><parameter>combobox</parameter>&nbsp;:</term>
	  <listitem><simpara>the combo box that received the
signal</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>user_param1</parameter>&nbsp;:</term>
          <listitem><simpara>the first user parameter (if any) specified
with the <link
linkend="method-gobject--connect"><methodname>connect</methodname>()</link>
method</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>...</parameter>&nbsp;:</term>
	  <listitem><simpara>additional user parameters (if
any)</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This signal is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The "changed" signal is emitted when a new item in the combo box
is selected.</para>

    </refsect2>
    
    <refsect2 id="signal-gtkcombobox--move-active">
      <title>The "move-active" gtk.ComboBox Signal</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>callback</methodname>
	  <methodparam><parameter>combobox</parameter></methodparam>
	  <methodparam><parameter>scroll_type</parameter></methodparam>
	  <methodparam><parameter>user_param1</parameter></methodparam>
	  <methodparam><parameter>...</parameter></methodparam>
	</methodsynopsis></programlisting>

      <variablelist>
	<varlistentry>
	  <term><parameter>combobox</parameter>&nbsp;:</term>
	  <listitem><simpara>the combo box that received the
	  signal</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>scroll_type</parameter>&nbsp;:</term>
	  <listitem><simpara>a
	  <xref linkend="gtk-scroll-type-constants" endterm="gtk-scroll-type-constants-title">GtkScrollType</xref>
	  </simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>user_param1</parameter>&nbsp;:</term>
          <listitem><simpara>the first user parameter (if any) specified
	  with the <link linkend="method-gobject--connect"><methodname>connect</methodname>()</link>
	  method</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>...</parameter>&nbsp;:</term>
	  <listitem><simpara>additional user parameters (if any)</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This signal is available in PyGTK 2.12 and above.</para>
      </note>

      <para>The "move-active" signal is a keybinding signal which gets emitted to move the active selection.</para>

    </refsect2>
    
    <refsect2 id="signal-gtkcombobox--popdown">
      <title>The "popdown" gtk.ComboBox Signal</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>callback</methodname>
	  <methodparam><parameter>combobox</parameter></methodparam>
	  <methodparam><parameter>user_param1</parameter></methodparam>
	  <methodparam><parameter>...</parameter></methodparam>
	</methodsynopsis></programlisting>

      <variablelist>
	<varlistentry>
	  <term><parameter>combobox</parameter>&nbsp;:</term>
	  <listitem><simpara>the combo box that received the
	  signal</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>user_param1</parameter>&nbsp;:</term>
          <listitem><simpara>the first user parameter (if any) specified
	  with the <link linkend="method-gobject--connect"><methodname>connect</methodname>()</link>
	  method</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>...</parameter>&nbsp;:</term>
	  <listitem><simpara>additional user parameters (if any)</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This signal is available in PyGTK 2.12 and above.</para>
      </note>

      <para>The "popdown" signal is a keybinding signal which gets emitted to popdown
      the combo box list. The default bindings for this signal are Alt+Up and Escape.</para>

    </refsect2>
    
    <refsect2 id="signal-gtkcombobox--popup">
      <title>The "popup" gtk.ComboBox Signal</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>callback</methodname>
	  <methodparam><parameter>combobox</parameter></methodparam>
	  <methodparam><parameter>user_param1</parameter></methodparam>
	  <methodparam><parameter>...</parameter></methodparam>
	</methodsynopsis></programlisting>

      <variablelist>
	<varlistentry>
	  <term><parameter>combobox</parameter>&nbsp;:</term>
	  <listitem><simpara>the combo box that received the
	  signal</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>user_param1</parameter>&nbsp;:</term>
          <listitem><simpara>the first user parameter (if any) specified
	  with the <link linkend="method-gobject--connect"><methodname>connect</methodname>()</link>
	  method</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>...</parameter>&nbsp;:</term>
	  <listitem><simpara>additional user parameters (if any)</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This signal is available in PyGTK 2.12 and above.</para>
      </note>

      <para>The "popup" signal is a keybinding signal which gets emitted to popup
      the combo box list. The default bindings for this signal are Alt+Down.</para>

    </refsect2>

  </refsect1>

</refentry>
