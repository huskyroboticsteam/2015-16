<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refentry id="class-gtksocket">
  <refnamediv>
    <refname>gtk.Socket</refname>
    <refpurpose>a container for widgets from other processes.</refpurpose>
  </refnamediv>

  <refsect1>
    <title>Synopsis</title>

    <classsynopsis language="python">
      <ooclass><classname>gtk.Socket</classname></ooclass>
      <ooclass><classname><link
linkend="class-gtkcontainer">gtk.Container</link></classname></ooclass>
      <constructorsynopsis language="python">
	<methodname><link
linkend="constructor-gtksocket">gtk.Socket</link></methodname>
	<methodparam></methodparam>  </constructorsynopsis>
      <methodsynopsis language="python">
	<methodname><link
linkend="method-gtksocket--add-id">add_id</link></methodname>
	<methodparam><parameter
		       role="keyword">window_id</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link
linkend="method-gtksocket--get-id">get_id</link></methodname>
	<methodparam></methodparam>  </methodsynopsis>
      
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtksocket--get-plug-window">get_plug_window</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis>
    
    </classsynopsis>

  </refsect1>

  <refsect1>
    <title>Ancestry</title>

<synopsis>+-- <link linkend="class-gobject">gobject.GObject</link>
  +-- <link linkend="class-gtkobject">gtk.Object</link>
    +-- <link linkend="class-gtkwidget">gtk.Widget</link>
      +-- <link linkend="class-gtkcontainer">gtk.Container</link>
        +-- <link linkend="class-gtksocket">gtk.Socket</link>
</synopsis>

  </refsect1>
  
  <refsect1>
		<title>Implemented Interfaces</title>
		<para>
			<link linkend="class-gtksocket"><classname>gtk.Socket</classname></link>
			implements 
			<link linkend="class-gtkbuildable"><classname>gtk.Buildable</classname></link>
		</para>
	</refsect1>

  <refsect1 id="properties-gtksocket">
    <title>gtk.Socket Properties</title>

    <para><link linkend="properties-gtkobject">gtk.Object Properties</link></para>
    <para><link linkend="properties-gtkwidget">gtk.Widget Properties</link></para>
    <para><link linkend="properties-gtkcontainer">gtk.Container Properties</link></para>

  </refsect1>

  <refsect1 id="style-properties-gtksocket">
    <title>gtk.Socket Style Properties</title>

    <para><link linkend="style-properties-gtkwidget">gtk.Widget Style Properties</link></para>

  </refsect1>

  <refsect1 id="signal-prototypes-gtksocket">
    <title>gtk.Socket Signal Prototypes</title>

    <para><link linkend="signal-prototypes-gobject">gobject.GObject Signal Prototypes</link></para>
    <para><link linkend="signal-prototypes-gtkobject">gtk.Object Signal Prototypes</link></para>
    <para><link linkend="signal-prototypes-gtkwidget">gtk.Widget Signal Prototypes</link></para>
    <para><link linkend="signal-prototypes-gtkcontainer">gtk.Container Signal Prototypes</link></para>

    <variablelist>
      <varlistentry>
        <term>"<link
linkend="signal-gtksocket--plug-added">plug-added</link>"</term>
        <listitem>
          <methodsynopsis
	    language="python"><methodname>callback</methodname>
            <methodparam><parameter>socket</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>"<link
linkend="signal-gtksocket--plug-removed">plug-removed</link>"</term>
        <listitem>
          <methodsynopsis
	    language="python"><methodname>callback</methodname>
            <methodparam><parameter>socket</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1>

  <refsect1>
    <title>Description</title>

    <para>Together with a <link
linkend="class-gtkplug"><classname>gtk.Plug</classname></link>, a <link
linkend="class-gtksocket"><classname>gtk.Socket</classname></link> provides
the ability to embed widgets from one process into another process in a
fashion that is transparent to the user. One process creates a <link
linkend="class-gtksocket"><classname>gtk.Socket</classname></link> widget
and, passes the that widget's window ID to the other process, which then
creates a <link
linkend="class-gtkplug"><classname>gtk.Plug</classname></link> with that
window ID. Any widgets contained in the <link
linkend="class-gtkplug"><classname>gtk.Plug</classname></link> then will
appear inside the first applications window. The socket's window ID is
obtained by using the <link
linkend="method-gtksocket--get-id"><methodname>get_id</methodname>()</link>
method. Before using this function, the socket must have been realized, and
added to its parent.</para>

    <para>When PyGTK is notified that the embedded window has been
destroyed, then it will destroy the socket as well. You should always,
therefore, be prepared for your sockets to be destroyed at any time when the
main event loop is running. The communication between a <link
linkend="class-gtksocket"><classname>gtk.Socket</classname></link> and a
<link linkend="class-gtkplug"><classname>gtk.Plug</classname></link> follows
the XEmbed protocol.</para>

  </refsect1>

  <refsect1 id="constructor-gtksocket">
    <title>Constructor</title>

    <programlisting><constructorsynopsis language="python">
	<methodname>gtk.Socket</methodname>
	<methodparam></methodparam>  </constructorsynopsis></programlisting>
    <variablelist>
      <varlistentry>
	<term><emphasis>Returns</emphasis>&nbsp;:</term>
	<listitem><simpara>the new <link
linkend="class-gtksocket"><classname>gtk.Socket</classname></link>.</simpara></listitem>
      </varlistentry>
    </variablelist>

    <para>Creates a new <link
linkend="class-gtksocket"><classname>gtk.Socket</classname></link>.</para>

  </refsect1>

  <refsect1>
    <title>Methods</title>

    <refsect2 id="method-gtksocket--add-id">
      <title>gtk.Socket.add_id</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>add_id</methodname>
	  <methodparam><parameter
			 role="keyword">window_id</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter
role="keyword">window_id</parameter>&nbsp;:</term>
	  <listitem><simpara>the window ID of a client participating in the
XEMBED protocol.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <methodname>add_id</methodname>() method adds an XEMBED
client specified by <parameter>window_id</parameter>, such as a <link
linkend="class-gtkplug"><classname>gtk.Plug</classname></link>, to the <link
linkend="class-gtksocket"><classname>gtk.Socket</classname></link>.  The
client may be in the same process or in a different process.</para>
      <para>
To embed a <link
linkend="class-gtkplug"><classname>gtk.Plug</classname></link> in a <link
linkend="class-gtksocket"><classname>gtk.Socket</classname></link>, you can
either:</para>

      <itemizedlist>
	<listitem>
	  <para>create the <link
linkend="class-gtkplug"><classname>gtk.Plug</classname></link> by calling
<link linkend="constructor-gtkplug">gtk.Plug</link>(), then call <link
linkend="method-gtkplug--get-id"><methodname>gtk.Plug.get_id</methodname>()</link> 
to get the window ID of the plug, and finally pass that to the <link
linkend="method-gtksocket--add-id"><function>gtk.Socket.add_id()</function></link>; 
or,</para>
	</listitem>
	<listitem>
	  <para>call the <link
linkend="method-gtksocket--get-id"><function>gtk.Socket.get_id()</function></link> 
method to get the window ID for the socket, then create the <link
linkend="class-gtkplug"><classname>gtk.Plug</classname></link> by calling
<link linkend="constructor-gtkplug">gtk.Plug</link>() passing in that ID.
The <link linkend="class-gtksocket"><classname>gtk.Socket</classname></link>
must have already be added into a toplevel window before you can make this
call.</para>
	</listitem>
      </itemizedlist>

    </refsect2>

  <refsect2 id="method-gtksocket--get-id">
      <title>gtk.Socket.get_id</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_id</methodname>
	  <methodparam></methodparam>  </methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>the window ID for the
socket</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <methodname>get_id</methodname>() method gets the window ID
of a <link
linkend="class-gtksocket"><classname>gtk.Socket</classname></link> widget,
which can then be used to create a client embedded inside the socket, for
instance with <link linkend="constructor-gtkplug">gtk.Plug</link>(). The
<link linkend="class-gtksocket"><classname>gtk.Socket</classname></link>
must have already be added into a toplevel window before you can make this
call.</para>

    </refsect2>

  <refsect2 id="method-gtksocket--get-plug-window">
      <title>gtk.Socket.get_plug_window</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_plug_window</methodname>
	  <methodparam></methodparam>  </methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>the window of the plug if available, or
	  <literal>None</literal>.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>
	The <methodname>get_plug_window</methodname>() method retrieves the
	window of the plug. Use this to check if the plug has been created
	inside of the socket.
      </para>

    </refsect2>

  </refsect1>

  <refsect1>
    <title>Signals</title>

    <refsect2 id="signal-gtksocket--plug-added">
      <title>The "plug-added" gtk.Socket Signal</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>callback</methodname>
	  <methodparam><parameter>socket</parameter></methodparam>
	  <methodparam><parameter>user_param1</parameter></methodparam>
	  <methodparam><parameter>...</parameter></methodparam>
	</methodsynopsis></programlisting>

      <variablelist>
	<varlistentry>
	  <term><parameter>socket</parameter>&nbsp;:</term>
	  <listitem><simpara>the socket that received the
signal</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>user_param1</parameter>&nbsp;:</term>
          <listitem><simpara>the first user parameter (if any) specified
with the <link
linkend="method-gobject--connect"><methodname>connect</methodname>()</link>
method</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>...</parameter>&nbsp;:</term>
	  <listitem><simpara>additional user parameters (if
any)</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The "plug-added" signal is emitted when a plug is added to the
socket.</para>

    </refsect2>

    <refsect2 id="signal-gtksocket--plug-removed">
      <title>The "plug-removed" gtk.Socket Signal</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>callback</methodname>
	  <methodparam><parameter>socket</parameter></methodparam>
	  <methodparam><parameter>user_param1</parameter></methodparam>
	  <methodparam><parameter>...</parameter></methodparam>
	</methodsynopsis></programlisting>

      <variablelist>
	<varlistentry>
	  <term><parameter>socket</parameter>&nbsp;:</term>
	  <listitem><simpara>the socket that received the
signal</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>user_param1</parameter>&nbsp;:</term>
          <listitem><simpara>the first user parameter (if any) specified
with the <link
linkend="method-gobject--connect"><methodname>connect</methodname>()</link>
method</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>...</parameter>&nbsp;:</term>
	  <listitem><simpara>additional user parameters (if
any)</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara><literal>True</literal> if the <link
	  linkend="class-gtksocket"><classname>gtk.Socket</classname></link>
	  should not be destroyed.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The "plug-removed" signal is emitted when a plug is removed from
the socket. The default action is to destroy the <link
linkend="class-gtksocket"><classname>gtk.Socket</classname></link> widget,
so if you want to reuse it you must add a signal handler that returns
<literal>True</literal>.</para>

    </refsect2>

  </refsect1>

</refentry>
