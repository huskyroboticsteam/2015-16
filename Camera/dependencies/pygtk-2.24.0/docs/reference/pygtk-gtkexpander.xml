<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="class-gtkexpander">
  <refnamediv>
    <refname>gtk.Expander</refname> <refpurpose>a container that can hide
    its child (new in PyGTK 2.4)</refpurpose>
  </refnamediv>

  <refsect1>
    <title>Synopsis</title>

    <classsynopsis language="python">
      <ooclass><classname>gtk.Expander</classname></ooclass>
      <ooclass><classname><link linkend="class-gtkbin">gtk.Bin</link></classname></ooclass>
      <constructorsynopsis language="python">
	<methodname><link linkend="constructor-gtkexpander">gtk.Expander</link></methodname>
	<methodparam><parameter role="keyword">label</parameter><initializer>None</initializer></methodparam>
      </constructorsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkexpander--set-expanded">set_expanded</link></methodname>
	<methodparam><parameter role="keyword">expanded</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkexpander--get-expanded">get_expanded</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkexpander--set-spacing">set_spacing</link></methodname>
	<methodparam><parameter role="keyword">spacing</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkexpander--get-spacing">get_spacing</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkexpander--set-label">set_label</link></methodname>
	<methodparam><parameter role="keyword">label</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkexpander--get-label">get_label</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkexpander--set-use-underline">set_use_underline</link></methodname>
	<methodparam><parameter role="keyword">use_underline</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkexpander--get-use-underline">get_use_underline</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkexpander--set-use-markup">set_use_markup</link></methodname>
	<methodparam><parameter role="keyword">use_markup</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkexpander--get-use-markup">get_use_markup</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkexpander--set-label-widget">set_label_widget</link></methodname>
	<methodparam><parameter role="keyword">label_widget</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkexpander--get-label-widget">get_label_widget</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkexpander--set-label-fill">set_label_fill</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link linkend="method-gtkexpander--get-label-fill">get_label_fill</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis>
    </classsynopsis>

    <programlisting>
<emphasis role="bold">Functions</emphasis>

<methodsynopsis language="python">
	<methodname><link linkend="function-gtk--expander-new-with-mnemonic">gtk.expander_new_with_mnemonic</link></methodname>
	<methodparam><parameter role="keyword">label</parameter><initializer>None</initializer></methodparam>
      </methodsynopsis></programlisting>

  </refsect1>

  <refsect1>
    <title>Ancestry</title>

<synopsis>+-- <link linkend="class-gobject">gobject.GObject</link>
  +-- <link linkend="class-gtkobject">gtk.Object</link>
    +-- <link linkend="class-gtkwidget">gtk.Widget</link>
      +-- <link linkend="class-gtkcontainer">gtk.Container</link>
        +-- <link linkend="class-gtkbin">gtk.Bin</link>
          +-- <link linkend="class-gtkexpander">gtk.Expander</link>
</synopsis>
  </refsect1>
  
  <refsect1>
		<title>Implemented Interfaces</title>
		<para>
			<link linkend="class-gtkexpander"><classname>gtk.Expander</classname></link>
			implements 
			<link linkend="class-gtkbuildable"><classname>gtk.Buildable</classname></link>
		</para>
	</refsect1>

  <refsect1 id="properties-gtkexpander">
    <title>gtk.Expander Properties</title>

    <para><link linkend="properties-gtkobject">gtk.Object Properties</link></para>
    <para><link linkend="properties-gtkwidget">gtk.Widget Properties</link></para>
    <para><link linkend="properties-gtkcontainer">gtk.Container Properties</link></para>

    <blockquote role="properties">
      <informaltable pgwide="1" frame="none">
	<tgroup cols="3">
	  <colspec column="1" colwidth="1in"/>
	  <colspec column="2" colwidth="1in"/>
	  <colspec column="3" colwidth="4in"/>
	  <tbody>

	    <row valign="top">
	      <entry>"expanded"</entry>
	      <entry>Read-Write</entry>
	      <entry>If <literal>True</literal>, the expander has been
opened to reveal the child widget.</entry>
	    </row>

	    <row valign="top">
	      <entry>"label"</entry>
	      <entry>Read-Write</entry>
	      <entry>The text of the expander's label.</entry>
	    </row>

	    <row valign="top">
	      <entry>"label-fill"</entry>
	      <entry>Read-Write</entry>
	      <entry>Whether the label widget should fill all available horizontal space.</entry>
	    </row>

	    <row valign="top">
	      <entry>"label-widget"</entry>
	      <entry>Read-Write</entry>
	      <entry>A widget to display in place of the usual expander
label.</entry>
	    </row>

	    <row valign="top">
	      <entry>"spacing"</entry>
	      <entry>Read-Write</entry>
	      <entry>The space to put between the label and the child.</entry>
	    </row>

	    <row valign="top">
	      <entry>"use-markup"</entry>
	      <entry>Read-Write</entry>
	      <entry>If <literal>True</literal>, the text of the label
includes Pango markup. See the <link
linkend="function-pango--parse-markup"><function>pango.parse_markup</function>()</link>
function.</entry>
	    </row>

	    <row valign="top">
	      <entry>"use-underline"</entry>
	      <entry>Read-Write</entry>
	      <entry>If <literal>True</literal>, n underline in the text
indicates the next character should be used for the mnemonic accelerator
key.</entry>
	    </row>

	  </tbody>
	</tgroup>
      </informaltable>
    </blockquote>

  </refsect1>

  <refsect1 id="style-properties-gtkexpander">
    <title>gtk.Expander Style Properties</title>

    <para><link linkend="style-properties-gtkwidget">gtk.Widget Style Properties</link></para>

    <blockquote role="properties">
      <informaltable pgwide="1" frame="none">
	<tgroup cols="3">
	  <colspec column="1" colwidth="1in"/>
	  <colspec column="2" colwidth="1in"/>
	  <colspec column="3" colwidth="4in"/>
	  <tbody>

	    <row valign="top">
	      <entry>"expander-size"</entry>
	      <entry>Read</entry>
	      <entry>The size of the expander arrow.</entry>
	    </row>

	    <row valign="top">
	      <entry>"expander-spacing"</entry>
	      <entry>Read</entry>
	      <entry>The spacing around expander arrow.</entry>
	    </row>

	  </tbody>
	</tgroup>
      </informaltable>
    </blockquote>

  </refsect1>

  <refsect1 id="signal-prototypes-gtkexpander">
    <title>gtk.Expander Signal Prototypes</title>

    <para><link linkend="signal-prototypes-gobject">gobject.GObject Signal Prototypes</link></para>
    <para><link linkend="signal-prototypes-gtkobject">gtk.Object Signal Prototypes</link></para>
    <para><link linkend="signal-prototypes-gtkwidget">gtk.Widget Signal Prototypes</link></para>
    <para><link linkend="signal-prototypes-gtkcontainer">gtk.Container Signal Prototypes</link></para>

    <variablelist>
      <varlistentry>
        <term>"<link linkend="signal-gtkexpander--activate">activate</link>"</term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>expander</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1>

  <refsect1>
    <title>Description</title>

    <note>
      <para>This widget is available in PyGTK 2.4 and above.</para>
    </note>

    <para>A <link
    linkend="class-gtkexpander"><classname>gtk.Expander</classname></link>
    allows the user to hide or show its child by clicking on an expander
    triangle similar to the triangles used in a <link
    linkend="class-gtktreeview"><classname>gtk.TreeView</classname></link>.</para>

    <para>Normally you use an expander as you would use any other descendant
    of <link linkend="class-gtkbin"><classname>gtk.Bin</classname></link>;
    you create the child widget and use <link
    linkend="method-gtkcontainer--add"><methodname>gtk.Container.add</methodname>()</link>
    to add it to the expander. When the expander is toggled, it will take
    care of showing and hiding the child automatically.</para>

    <refsect2 id="expander-description-special-usage">
      <title>Special Usage</title>

      <para>There there are situations in which you may prefer to show and
      hide the expanded widget yourself, such as when you want to actually
      create the widget at expansion time. In this case, create a <link
      linkend="class-gtkexpander"><classname>gtk.Expander</classname></link>
      but do not add a child to it. The expander widget has the "expanded"
      property that can be used to monitor its expansion state. You should
      watch this property with a signal connection as follows:</para>

      <programlisting>
  expander = gtk.expander_new_with_mnemonic("_More Options")
  expander.connect("notify::expanded", expander_callback)

  ...

  def expander_callback(expander, param_spec, user_data):
    if expander.get_expanded():
      # Show or create widgets
    else:
      # Hide or destroy widgets
</programlisting>

      <para>The "activate" signal can also be used to track the expansion
      though it occurs before the "expanded" property is changed so the
      logic of the <function>expander_callback</function>() function would
      have to be reversed.</para>

    </refsect2>

  </refsect1>

  <refsect1 id="constructor-gtkexpander">
    <title>Constructor</title>

    <programlisting><constructorsynopsis language="python">
	<methodname>gtk.Expander</methodname>
	<methodparam><parameter role="keyword">label</parameter><initializer>None</initializer></methodparam>
      </constructorsynopsis></programlisting>
    <variablelist>
      <varlistentry>
	<term><parameter role="keyword">label</parameter>&nbsp;:</term>
	<listitem><simpara>the text of the label or
<literal>None</literal></simpara></listitem>
      </varlistentry>
      <varlistentry>
	<term><emphasis>Returns</emphasis>&nbsp;:</term>
	<listitem><simpara>a new <link linkend="class-gtkexpander"><classname>gtk.Expander</classname></link> widget.</simpara></listitem>
      </varlistentry>
    </variablelist>

    <note>
      <para>This constructor is available in PyGTK 2.4 and above.</para>
    </note>

    <para>Creates a new expander using <parameter>label</parameter> as the
text of the label. If <parameter>label</parameter> is
<literal>None</literal> or not specified, no label will be created.</para>

  </refsect1>

  <refsect1>
    <title>Methods</title>

    <refsect2 id="method-gtkexpander--set-expanded">
      <title>gtk.Expander.set_expanded</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>set_expanded</methodname>
	  <methodparam><parameter role="keyword">expanded</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">expanded</parameter>&nbsp;:</term>
	  <listitem><simpara>if <literal>True</literal>, the child widget is
revealed</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>set_expanded</methodname>() method sets the
"expanded" property to the value of <parameter>expanded</parameter>. If
<parameter>expanded</parameter> is <literal>True</literal>, the child widget
is revealed; if <literal>False</literal>, the child widget is hidden.</para>

    </refsect2>

    <refsect2 id="method-gtkexpander--get-expanded">
      <title>gtk.Expander.get_expanded</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_expanded</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>True if the child is
revealed.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>get_expanded</methodname>() method returns the
value of the "expanded" property. If "expanded" is <literal>True</literal>
the child widget is revealed.</para>

    </refsect2>

    <refsect2 id="method-gtkexpander--set-spacing">
      <title>gtk.Expander.set_spacing</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>set_spacing</methodname>
	  <methodparam><parameter role="keyword">spacing</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">spacing</parameter>&nbsp;:</term>
	  <listitem><simpara>the distance between the expander and child
in pixels.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>set_spacing</methodname>() method sets the
"spacing" property to the value of <parameter>spacing</parameter> that sets
is the number of pixels to place between expander and the child.</para>

    </refsect2>

    <refsect2 id="method-gtkexpander--get-spacing">
      <title>gtk.Expander.get_spacing</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_spacing</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>the spacing between the expander and
child.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>get_spacing</methodname>() method returns the
value of the "spacing" property set by the <link
linkend="method-gtkexpander--set-spacing"><methodname>set_spacing()</methodname></link>
method.</para>

    </refsect2>

    <refsect2 id="method-gtkexpander--set-label">
      <title>gtk.Expander.set_label</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>set_label</methodname>
	  <methodparam><parameter role="keyword">label</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">label</parameter>&nbsp;:</term>
	  <listitem><simpara>a string to use as the label or
<literal>None</literal></simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>set_label</methodname>() method sets the "label"
property to the value of <parameter>label</parameter> and sets the text of
the label of the expander. Any previously set label will be cleared. If
<parameter>label</parameter> is <literal>None</literal> the expander will
have no label.</para>

    </refsect2>

    <refsect2 id="method-gtkexpander--get-label">
      <title>gtk.Expander.get_label</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_label</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>the text of the label widget.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>get_label</methodname>() method returns the
value of the "label" property that contains the text of the expander label,
as set by the <link
linkend="method-gtkexpander--set-label"><methodname>set_label()</methodname></link>
method. If the label text has not been set the return value will be
<literal>None</literal>.</para>

    </refsect2>

    <refsect2 id="method-gtkexpander--set-use-underline">
      <title>gtk.Expander.set_use_underline</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>set_use_underline</methodname>
	  <methodparam><parameter role="keyword">use_underline</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">use_underline</parameter>&nbsp;:</term>
	  <listitem><simpara><literal>True</literal> if underlines in the
text indicate mnemonics</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>set_use_underline</methodname>() method sets the
"use_underline" property to the value of
<parameter>use_underline</parameter>. If
<parameter>use_underline</parameter> is <literal>True</literal>, an
underline in the text of the expander label indicates the next character
should be used for the mnemonic accelerator key.</para>

    </refsect2>

    <refsect2 id="method-gtkexpander--get-use-underline">
      <title>gtk.Expander.get_use_underline</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_use_underline</methodname>
	  <methodparam></methodparam>  </methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara><literal>True</literal> if an embedded
underline in the expander label indicates the mnemonic accelerator
keys.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>get_use_underline</methodname>() method returns
the value of the "use-underline" property. If "use-underline" is
<literal>True</literal> an embedded underline in the expander label
indicates a mnemonic. See the <link
linkend="method-gtkexpander--set-use-underline"><methodname>set_use_underline()</methodname></link>
method.</para>

    </refsect2>

    <refsect2 id="method-gtkexpander--set-use-markup">
      <title>gtk.Expander.set_use_markup</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>set_use_markup</methodname>
	  <methodparam><parameter role="keyword">use_markup</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">use_markup</parameter>&nbsp;:</term>
	  <listitem><simpara>if <literal>True</literal>, the label's text
should be parsed for markup</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>set_use_markup</methodname>() method sets the
"use-markup" property to the value of <parameter>use_markup</parameter>. If
<parameter>use_markup</parameter> is <literal>True</literal> the text of the
label contains markup in the <link linkend="pango-markup-language">Pango
text markup language</link>. See the <link
linkend="method-gtklabel--set-markup"><methodname>gtk.Label.set_markup()</methodname></link> method for more information.</para>

    </refsect2>

    <refsect2 id="method-gtkexpander--get-use-markup">
      <title>gtk.Expander.get_use_markup</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_use_markup</methodname>
	  <methodparam></methodparam>  </methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara><literal>True</literal> if the label's text
will be parsed for markup</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>get_use_markup</methodname>() method returns the
value of the "use-markup" property. If "use-markup" is
<literal>True</literal>, the label's text is interpreted as marked up with
the <link linkend="pango-markup-language">Pango text markup
language</link>. See the <link
linkend="method-gtkexpander--set-use-markup"><methodname>set_use_markup()</methodname></link>
method.</para>

    </refsect2>

    <refsect2 id="method-gtkexpander--set-label-widget">
      <title>gtk.Expander.set_label_widget</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>set_label_widget</methodname>
	  <methodparam><parameter role="keyword">label_widget</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">label_widget</parameter>&nbsp;:</term>
	  <listitem><simpara>the new label widget or
<literal>None</literal></simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>set_label_widget</methodname>() method sets the
expander to use the widget specified by <parameter>label_widget</parameter>
as the label instead of a <link
linkend="class-gtklabel"><classname>gtk.Label</classname></link>. This
widget appears embedded alongside the expander arrow. If
<parameter>label_widget</parameter> is <literal>None</literal>, the expander
will have no label.</para>

    </refsect2>

    <refsect2 id="method-gtkexpander--get-label-widget">
      <title>gtk.Expander.get_label_widget</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>get_label_widget</methodname>
	  <methodparam></methodparam>  </methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>the label widget, or <literal>None</literal>
if there is none.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This method is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <methodname>get_label_widget</methodname>() method retrieves
the expander's label widget. See the <link
linkend="method-gtkexpander--set-label-widget"><methodname>set_label_widget()</methodname></link>
method.</para>

    </refsect2>

  </refsect1>

  <refsect1>
    <title>Functions</title>

    <refsect2 id="function-gtk--expander-new-with-mnemonic">
      <title>gtk.expander_new_with_mnemonic</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.expander_new_with_mnemonic</methodname>
	  <methodparam><parameter
			 role="keyword">label</parameter><initializer>None</initializer></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">label</parameter>&nbsp;:</term>
	  <listitem><simpara> the text of the label with an underscore in
front of the mnemonic character or <literal>None</literal></simpara></listitem>
	</varlistentry>
	<varlistentry>
	<term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara> a new <link
linkend="class-gtkexpander"><classname>gtk.Expander</classname></link> widget.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This function is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The <function>gtk.expander_new_with_mnemonic</function>()
function creates a new <link
linkend="class-gtkexpander"><classname>gtk.Expander</classname></link> using
<parameter>label</parameter> as the text of the label. If characters in
<parameter>label</parameter> are preceded by an underscore, they are
underlined. If you need a literal underscore character in a label, use '__'
(two underscores). The first underlined character represents a keyboard
accelerator called a mnemonic. Pressing <keycap>Alt</keycap> with that key
activates the button. If <parameter>label</parameter> is
<literal>None</literal> the expander will have no label.</para>

    </refsect2>

    <refsect2 id="method-gtkexpander--set-label-fill">
      <title>gtk.Expander.set_label_fill</title>

      <programlisting><methodsynopsis language="python">
        <methodname>set_label_fill</methodname>
        <methodparam><parameter role="keyword">label_fill</parameter></methodparam>
      </methodsynopsis></programlisting>
      <variablelist>
        <varlistentry>
          <term><parameter role="keyword">label_fill</parameter>&nbsp;:</term>
          <listitem><simpara><literal>True</literal> if the label should should fill all available horizontal space, <literal>False</literal> otherwise.</simpara></listitem>
        </varlistentry>
      </variablelist>

      <note>
        <para>This method is available in PyGTK 2.22 and above.</para>
      </note>

      <para>The <methodname>set_label_fill</methodname>() method sets whether the label widget should fill all available horizontal space allocated to expander.</para>

    </refsect2>

    <refsect2 id="method-gtkexpander--get-label-fill">
      <title>gtk.Expander.get_label_fill</title>

      <programlisting><methodsynopsis language="python">
        <methodname>get_label_fill</methodname>
        <methodparam></methodparam>
      </methodsynopsis></programlisting>
      <variablelist>
        <varlistentry>
          <term><emphasis>Returns</emphasis>&nbsp;:</term>
          <listitem><simpara><literal>True</literal> if the label widget will fill all available horizontal space, <literal>False</literal> otherwise.</simpara></listitem>
        </varlistentry>
      </variablelist>

      <note>
        <para>This method is available in PyGTK 2.22 and above.</para>
      </note>

      <para>The <methodname>get_length</methodname>() method returns whether the label widget will fill all available horizontal space allocated to expander.</para>

    </refsect2>

  </refsect1>

  <refsect1>
    <title>Signals</title>

    <refsect2 id="signal-gtkexpander--activate">
      <title>The "activate" gtk.Expander Signal</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>callback</methodname>
	  <methodparam><parameter>expander</parameter></methodparam>
	  <methodparam><parameter>user_param1</parameter></methodparam>
	  <methodparam><parameter>...</parameter></methodparam>
	</methodsynopsis></programlisting>

      <variablelist>
	<varlistentry>
	  <term><parameter>expander</parameter>&nbsp;:</term>
	  <listitem><simpara>the expander that received the
signal</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>user_param1</parameter>&nbsp;:</term>
          <listitem><simpara>the first user parameter (if any) specified
with the <link
linkend="method-gobject--connect"><methodname>connect</methodname>()</link>
method</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>...</parameter>&nbsp;:</term>
	  <listitem><simpara>additional user parameters (if
any)</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>This signal is available in PyGTK 2.4 and above.</para>
      </note>

      <para>The "activate" signal is emitted when the expander is activated
      by the user clicking on the expander toggle. Using the
      "notify:expanded" signal may be more appropriate in some cases as
      noted in the <link
      linkend="expander-description-special-usage">Special Usage
      description</link>.</para>

    </refsect2>

  </refsect1>

</refentry>
