<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refentry id="class-gtkobject">
  <refnamediv>
    <refname>gtk.Object</refname>
    <refpurpose>the base class of the PyGTK type hierarchy.</refpurpose>
  </refnamediv>

  <refsect1>
    <title>Synopsis</title>

    <classsynopsis language="python">
      <ooclass><classname>gtk.Object</classname></ooclass>
      <ooclass><classname><link
linkend="class-gobject">gobject.GObject</link></classname></ooclass>
      <methodsynopsis language="python">
	<methodname><link
linkend="method-gtkobject--flags">flags</link></methodname>
	<methodparam></methodparam>  </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link
linkend="method-gtkobject--set-flags">set_flags</link></methodname>
	<methodparam><parameter>flags</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link
linkend="method-gtkobject--unset-flags">unset_flags</link></methodname>
	<methodparam><parameter>flags</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
	<methodname><link
linkend="method-gtkobject--destroy">destroy</link></methodname>
	<methodparam></methodparam>  </methodsynopsis>
    </classsynopsis>

    <programlisting>
<emphasis role="bold">Functions</emphasis>

<methodsynopsis language="python">
	<methodname><link
linkend="function-gtk--bindings-activate">gtk.bindings_activate</link></methodname>
	<methodparam><parameter
		       role="keyword">object</parameter></methodparam>
	<methodparam><parameter
		       role="keyword">keyval</parameter></methodparam>
	<methodparam><parameter
		       role="keyword">modifiers</parameter></methodparam>
      </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gtk--bindings-activate-event">gtk.bindings_activate_event</link></methodname>
	<methodparam><parameter
		       role="keyword">object</parameter></methodparam>
	<methodparam><parameter
		       role="keyword">event</parameter></methodparam>
      </methodsynopsis><methodsynopsis language="python">
	  <methodname><link
linkend="function-gtk--binding-entry-add-signal">gtk.binding_entry_add_signal</link></methodname>
	  <methodparam><parameter>object</parameter></methodparam>
	  <methodparam><parameter>keyval</parameter></methodparam>
	  <methodparam><parameter>modifiers</parameter></methodparam>
	  <methodparam><parameter>signal_name</parameter></methodparam>
	  <methodparam><parameter>...</parameter></methodparam>
	</methodsynopsis><methodsynopsis language="python">
	  <methodname><link
linkend="function-gtk--binding-entry-remove">gtk.binding_entry_remove</link></methodname>
	  <methodparam><parameter
                         role="keyword">class_type</parameter></methodparam>
	  <methodparam><parameter
                         role="keyword">keyval</parameter></methodparam>
	  <methodparam><parameter
                         role="keyword">modifiers</parameter></methodparam>
	</methodsynopsis></programlisting>

  </refsect1>

  <refsect1>
    <title>Ancestry</title>

<synopsis>+-- <link linkend="class-gobject">gobject.GObject</link>
  +-- <link linkend="class-gtkobject">gtk.Object</link>
</synopsis>

  </refsect1>

  <refsect1 id="properties-gtkobject">
    <title>gtk.Object Properties</title>

    <blockquote role="properties">
      <informaltable pgwide="1" frame="none">
        <tgroup cols="3">
          <colspec column="1" colwidth="1in"/>
          <colspec column="2" colwidth="1in"/>
          <colspec column="3" colwidth="3.5in"/>
        <tbody>

        <row valign="top">
          <entry>"user-data"</entry>
          <entry>Read-Write</entry>
          <entry>Anonymous User Data Pointer</entry>
        </row>

        </tbody>
      </tgroup>
      </informaltable>
    </blockquote>

  </refsect1>

  <refsect1 id="signal-prototypes-gtkobject">
    <title>gtk.Object Signal Prototypes</title>

    <para><link linkend="signal-prototypes-gobject">gobject.GObject Signal Prototypes</link></para>

    <variablelist>
      <varlistentry>
        <term>"<link linkend="signal-gtkobject--destroy">destroy</link>"</term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>object</parameter>
            </methodparam>
            <methodparam><parameter>user_param1</parameter>
            </methodparam>
            <methodparam><parameter>...</parameter>
            </methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1>

  <refsect1>
    <title>Description</title>

    <para><link
linkend="class-gtkobject"><classname>gtk.Object</classname></link> is the
base class for all widgets, and for a few non-widget objects such as <link
linkend="class-gtkadjustment"><classname>gtk.Adjustment</classname></link>.
<link linkend="class-gtkobject"><classname>gtk.Object</classname></link>
predates <link
linkend="class-gobject"><classname>GObject</classname></link>; non-widgets
that derive from <link
linkend="class-gtkobject"><classname>gtk.Object</classname></link> rather
than <link linkend="class-gobject"><classname>GObject</classname></link> do
so for backward compatibility reasons.</para>

    <para>The "destroy" signal, emitted by the <link
linkend="method-gtkobject--destroy"><methodname>destroy</methodname>()</link> 
method asks all code owning a GTK reference to the object to release its GTK
reference. So, for example, if you call
<methodname>window.destroy</methodname>() where
<parameter>window</parameter> is a <link
linkend="class-gtkwindow"><classname>gtk.Window</classname></link>, GTK will
release the GTK reference count that it owns; if you call
<methodname>button.destroy</methodname>() where button is a <link
linkend="class-gtkbutton"><classname>gtk.Button</classname></link>,
<parameter>button</parameter> will be removed from its parent container and
the parent container will release its GTK reference to
<parameter>button</parameter>. Because these GTK references are released,
calling <link
linkend="method-gtkobject--destroy"><methodname>destroy</methodname>()</link> 
should result in freeing all memory associated with an object (finalizing
it) if the GTK reference count reaches zero. However, in PyGTK the GTK
objects are wrapped in a Python object that has its own reference counting
mechanism. The <link
linkend="method-gtkobject--destroy"><methodname>destroy</methodname>()</link> 
method does not affect the Python reference counts. The GTK object
associated with a Python object will not be released until the Python object
reference count reaches zero. Therefore, calling the <link
linkend="method-gtkobject--destroy"><methodname>destroy</methodname>()</link> 
method will not result in the finalization of the GTK object until the
Python object is finalized. In the case mentioned above if a <link
linkend="class-gtkbutton"><classname>gtk.Button</classname></link> is
destroyed using the <link
linkend="method-gtkobject--destroy"><methodname>destroy</methodname>()</link> 
method, it will be removed from its container and unmapped and unrealized
but it will not be finalized because the Python wrapper object will still
exist and hold a reference.</para>

  </refsect1>

  <refsect1>
    <title>Methods</title>

    <refsect2 id="method-gtkobject--flags">
      <title>gtk.Object.flags</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>flags</methodname>
	  <methodparam></methodparam>  </methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>the flags set for the
object</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <methodname>flags</methodname>() method returns the value of
the flags for the object. The flags returned will include both the <link
linkend="class-gtkobject"><classname>gtk.Object</classname></link> flags and
the <link linkend="class-gtkwidget"><classname>gtk.Widget</classname></link>
flags.</para>

      <para>The <link
linkend="class-gtkobject"><classname>gtk.Object</classname></link> flags
are:</para>

      <variablelist>
	<varlistentry>
	  <term><literal>gtk.IN_DESTRUCTION</literal></term>
	  <listitem>
	    <simpara>the object is currently being destroyed.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.FLOATING</literal></term>
	  <listitem>
	    <simpara>the object is orphaned.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.RESERVED_1</literal></term>
	  <listitem>
	    <simpara>reserved for future use</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.RESERVED_2</literal></term>
	  <listitem>
	    <simpara>reserved for future use</simpara>
	  </listitem>
	</varlistentry>
      </variablelist>

      <para>The <link
linkend="class-gtkwidget"><classname>gtk.Widget</classname></link> flags
are:</para>

      <variablelist>
	<varlistentry>
	  <term><literal>gtk.TOPLEVEL</literal></term>
	  <listitem>
	    <simpara>widgets without a real parent (e.g. <link
linkend="class-gtkwindow"><classname>gtk.Window</classname></link> and <link
linkend="class-gtkmenu"><classname>gtk.Menu</classname></link>) have this
flag set throughout their lifetime. Toplevel widgets always contain their
own <link
linkend="class-gdkwindow"><classname>gtk.gdk.Window</classname></link>.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.NO_WINDOW</literal></term>
	  <listitem>
	    <simpara>a widget that does not provide its own <link
linkend="class-gdkwindow"><classname>gtk.gdk.Window</classname></link>.
Visible action (e.g. drawing) is performed on the parent's <link
linkend="class-gdkwindow"><classname>gtk.gdk.Window</classname></link>.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.REALIZED</literal></term>
	  <listitem>
	    <simpara>the widget has an associated <link
linkend="class-gdkwindow"><classname>gtk.gdk.Window</classname></link>.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.MAPPED</literal></term>
	  <listitem>
	    <simpara>the widget can be displayed on the screen.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.VISIBLE</literal></term>
	  <listitem>
	    <simpara>the widget will be mapped as soon as its parent is
mapped.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.SENSITIVE</literal></term>
	  <listitem>
	    <simpara>The sensitivity of a widget determines whether it will
receive certain events (e.g. button or key presses). One requirement for the
widget's sensitivity is to have this flag set.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.PARENT_SENSITIVE</literal></term>
	  <listitem>
	    <simpara>This is the second requirement for the widget's
sensitivity. Once a widget has <literal>gtk.SENSITIVE</literal> and
<literal>gtk.PARENT_SENSITIVE set</literal>, its state is effectively
sensitive.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.CAN_FOCUS</literal></term>
	  <listitem>
	    <simpara>the widget is able to handle focus grabs.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.HAS_FOCUS</literal></term>
	  <listitem>
	    <simpara>the widget has the focus - assumes that
<literal>gtk.CAN_FOCUS</literal> is set</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.CAN_DEFAULT</literal></term>
	  <listitem>
	    <simpara>the widget is allowed to receive the default
action.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.HAS_DEFAULT</literal></term>
	  <listitem>
	    <simpara>the widget currently will receive the default
action.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.HAS_GRAB</literal></term>
	  <listitem>
	    <simpara>the widget is in the grab_widgets stack, and will be
the preferred one for receiving events.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.RC_STYLE</literal></term>
	  <listitem>
	    <simpara>the widgets style has been looked up through the RC
mechanism. It does not imply that the widget actually had a style defined
through the RC mechanism.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.COMPOSITE_CHILD</literal></term>
	  <listitem>
	    <simpara>the widget is a composite child of its
parent.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.NO_REPARENT</literal></term>
	  <listitem>
	    <simpara>unused</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.APP_PAINTABLE</literal></term>
	  <listitem>
	    <simpara>set on widgets whose window the application directly
draws on, in order to keep GTK from overwriting the drawn stuff.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.RECEIVES_DEFAULT</literal></term>
	  <listitem>
	    <simpara>the widget when focused will receive the default action
and have <literal>gtk.HAS_DEFAULT</literal> set even if there is a different
widget set as default.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.DOUBLE_BUFFERED</literal></term>
	  <listitem>
	    <simpara>exposes done on the widget should be
double-buffered.</simpara>
	  </listitem>
	</varlistentry>
      </variablelist>

    </refsect2>

    <refsect2 id="method-gtkobject--set-flags">
      <title>gtk.Object.set_flags</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>set_flags</methodname>
	  <methodparam><parameter
			 role="keyword">flags</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">flags</parameter>&nbsp;:</term>
	  <listitem><simpara>the <link
linkend="class-gtkobject"><classname>gtk.Object</classname></link> and <link
linkend="class-gtkwidget"><classname>gtk.Widget</classname></link> flags to
be set on this object</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <methodname>set_flags</methodname>() method sets the object
flags according to the value of <parameter>flags</parameter>. See <link
linkend="method-gtkobject--flags"><methodname>flags</methodname>()</link>
for a description of the <link
linkend="class-gtkobject"><classname>gtk.Object</classname></link> and <link
linkend="class-gtkwidget"><classname>gtk.Widget</classname></link> flags
that can be set.</para>

    </refsect2>

    <refsect2 id="method-gtkobject--unset-flags">
      <title>gtk.Object.unset_flags</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>unset_flags</methodname>
	  <methodparam><parameter
			 role="keyword">flags</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">flags</parameter>&nbsp;:</term>
	  <listitem><simpara>the <link
linkend="class-gtkobject"><classname>gtk.Object</classname></link> and <link
linkend="class-gtkwidget"><classname>gtk.Widget</classname></link> flags to
be unset on this object</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <methodname>unset_flags</methodname>() method unsets the
object flags according to the value of <parameter>flags</parameter>. See
<link
linkend="method-gtkobject--flags"><methodname>flags</methodname>()</link>
for a description of the <link
linkend="class-gtkobject"><classname>gtk.Object</classname></link> and <link
linkend="class-gtkwidget"><classname>gtk.Widget</classname></link> flags
that can be unset.</para>

    </refsect2>

    <refsect2 id="method-gtkobject--destroy">
      <title>gtk.Object.destroy</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>destroy</methodname>
	  <methodparam></methodparam>  </methodsynopsis></programlisting>

      <para>The <methodname>destroy</methodname>() method emits the
"destroy" signal notifying all reference holders that they should release
the <link
linkend="class-gtkobject"><classname>gtk.Object</classname></link>.</para>

    </refsect2>

  </refsect1>

  <refsect1>
    <title>Functions</title>

    <refsect2 id="function-gtk--bindings-activate">
      <title>gtk.bindings_activate</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.bindings_activate</methodname>
	  <methodparam><parameter
			 role="keyword">object</parameter></methodparam>
	  <methodparam><parameter
			 role="keyword">keyval</parameter></methodparam>
	  <methodparam><parameter
			 role="keyword">modifiers</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">object</parameter>&nbsp;:</term>
	  <listitem><simpara>the <link
linkend="class-gtkobject"><classname>gtk.Object</classname></link> to
activate the bindings on</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter role="keyword">keyval</parameter>&nbsp;:</term>
	  <listitem><simpara>a key value</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter
role="keyword">modifiers</parameter>&nbsp;:</term>
	  <listitem><simpara>a modifier mask</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter role="keyword"></parameter>&nbsp;:</term>
	  <listitem><simpara></simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara><literal>True</literal> if the binding could be
activated</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.bindings_activate</function>() function
activates the bindings associated with the <link
linkend="class-gtkobject"><classname>gtk.Object</classname></link> specified
by object with the key value specified by <parameter>keyval</parameter> and
the modifier mask specified by <parameter>modifiers</parameter>.</para>

    </refsect2>

    <refsect2 id="function-gtk--bindings-activate-event">
      <title>gtk.bindings_activate_event</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.bindings_activate_event</methodname>
	  <methodparam><parameter
			 role="keyword">object</parameter></methodparam>
	  <methodparam><parameter
			 role="keyword">event</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">object</parameter>&nbsp;:</term>
	  <listitem><simpara>the <link
linkend="class-gtkobject"><classname>gtk.Object</classname></link> to
activate the bindings on</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter role="keyword">event</parameter>&nbsp;:</term>
	  <listitem><simpara>a <link linkend="class-gdkevent"><classname>gtk.gdk.Event</classname></link></simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara><literal>True</literal> if a matching key
	  binding was found</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.bindings_activate_event</function>() function
looks up key bindings for the <link
linkend="class-gtkobject"><classname>gtk.Object</classname></link> specified
by <parameter>object</parameter> to find one matching the key <link
linkend="class-gdkevent"><classname>gtk.gdk.Event</classname></link>
specified by <parameter>event</parameter>, and if one was found, activate
it.</para>

    </refsect2>

    <refsect2 id="function-gtk--binding-entry-add-signal">
      <title>gtk.binding_entry_add_signal</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.binding_entry_add_signal</methodname>
	  <methodparam><parameter>object</parameter></methodparam>
	  <methodparam><parameter>keyval</parameter></methodparam>
	  <methodparam><parameter>modifiers</parameter></methodparam>
	  <methodparam><parameter>signal_name</parameter></methodparam>
	  <methodparam><parameter>...</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter>object</parameter>&nbsp;:</term>
	  <listitem><simpara>the <link
linkend="class-gtkobject"><classname>gtk.Object</classname></link>
class the binding entry will be associated with</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>keyval</parameter>&nbsp;:</term>
	  <listitem><simpara>the key value</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>modifiers</parameter>&nbsp;:</term>
	  <listitem><simpara>the modifier mask</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>signal_name</parameter>&nbsp;:</term>
	  <listitem><simpara>the signal name</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>...</parameter>&nbsp;:</term>
	  <listitem><simpara>zero or more pairs of value type-value
pairs</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.binding_entry_add_signal</function>() function
adds a binding (specified by <parameter>keyval</parameter> and
<parameter>modifiers</parameter>) to the binding set of the object class
derived from <parameter>object</parameter>. The signal specified by
<parameter>signal_name</parameter> will be emitted with the optional
arguments specified by the argument pairs denoted by ... that are value type
and value. This function is used when creating a new widget class to set up
key bindings.</para>

    </refsect2>

    <refsect2 id="function-gtk--binding-entry-remove">
      <title>gtk.binding_entry_remove</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.binding_entry_remove</methodname>
	  <methodparam><parameter
                         role="keyword">class_type</parameter></methodparam>
	  <methodparam><parameter
                         role="keyword">keyval</parameter></methodparam>
	  <methodparam><parameter
                         role="keyword">modifiers</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">class_type</parameter>&nbsp;:</term>
	  <listitem><simpara>the <link
linkend="class-gtkobject"><classname>gtk.Object</classname></link>
class the binding entry will be removed from</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter role="keyword">keyval</parameter>&nbsp;:</term>
	  <listitem><simpara>the key value</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter
role="keyword">modifiers</parameter>&nbsp;:</term>
	  <listitem><simpara>the modifier mask</simpara></listitem>
	</varlistentry>
      </variablelist>

      <note>
        <para>This function is available in PyGTK 2.2 and above.</para>
      </note>

      <para>The <function>gtk.binding_entry_remove</function>() function
removes the binding (specified by <parameter>keyval</parameter> and
<parameter>modifiers</parameter>) from the binding set of the object class
specified by <parameter>class_type</parameter>.</para>

    </refsect2>

  </refsect1>

  <refsect1>
    <title>Signals</title>

    <refsect2 id="signal-gtkobject--destroy">
      <title>The "destroy" gtk.Object Signal</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>callback</methodname>
	  <methodparam><parameter>object</parameter></methodparam>
	  <methodparam><parameter>user_param1</parameter></methodparam>
	  <methodparam><parameter>...</parameter></methodparam>
	</methodsynopsis></programlisting>

      <variablelist>
	<varlistentry>
	  <term><parameter>object</parameter>&nbsp;:</term>
	  <listitem><simpara>the object that received the
signal</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>user_param1</parameter>&nbsp;:</term>
          <listitem><simpara>the first user parameter (if any) specified
with the <link
linkend="method-gobject--connect"><methodname>connect</methodname>()</link>
method</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>...</parameter>&nbsp;:</term>
	  <listitem><simpara>additional user parameters (if
any)</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The "destroy" signal is emitted when the references for the
object should be destroyed.</para>

    </refsect2>

  </refsect1>

</refentry>
